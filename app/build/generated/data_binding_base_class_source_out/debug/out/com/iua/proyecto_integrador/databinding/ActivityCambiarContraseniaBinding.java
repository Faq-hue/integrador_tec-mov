// Generated by view binder compiler. Do not edit!
package com.iua.proyecto_integrador.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.iua.proyecto_integrador.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCambiarContraseniaBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button applyChangesPass;

  @NonNull
  public final ImageButton backButton;

  @NonNull
  public final ImageView imageView6;

  @NonNull
  public final EditText newPassword;

  @NonNull
  public final EditText password;

  @NonNull
  public final EditText repeatNewPassword;

  @NonNull
  public final Toolbar toolbar;

  private ActivityCambiarContraseniaBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button applyChangesPass, @NonNull ImageButton backButton,
      @NonNull ImageView imageView6, @NonNull EditText newPassword, @NonNull EditText password,
      @NonNull EditText repeatNewPassword, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.applyChangesPass = applyChangesPass;
    this.backButton = backButton;
    this.imageView6 = imageView6;
    this.newPassword = newPassword;
    this.password = password;
    this.repeatNewPassword = repeatNewPassword;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCambiarContraseniaBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCambiarContraseniaBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_cambiar_contrasenia, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCambiarContraseniaBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.applyChangesPass;
      Button applyChangesPass = ViewBindings.findChildViewById(rootView, id);
      if (applyChangesPass == null) {
        break missingId;
      }

      id = R.id.backButton;
      ImageButton backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.imageView6;
      ImageView imageView6 = ViewBindings.findChildViewById(rootView, id);
      if (imageView6 == null) {
        break missingId;
      }

      id = R.id.newPassword;
      EditText newPassword = ViewBindings.findChildViewById(rootView, id);
      if (newPassword == null) {
        break missingId;
      }

      id = R.id.password;
      EditText password = ViewBindings.findChildViewById(rootView, id);
      if (password == null) {
        break missingId;
      }

      id = R.id.repeatNewPassword;
      EditText repeatNewPassword = ViewBindings.findChildViewById(rootView, id);
      if (repeatNewPassword == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityCambiarContraseniaBinding((ConstraintLayout) rootView, applyChangesPass,
          backButton, imageView6, newPassword, password, repeatNewPassword, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
